def nuxeo_package_helper = evaluate readTrusted('src/org/nuxeo/openshift/library/NuxeoPackageHelper.groovy')
def openshift_image_manager = evaluate readTrusted('src/org/nuxeo/openshift/library/OpenshiftImageManager.groovy')
def project = ""
def pipeline_name = ""
def project_git_repo = ""
def project_git_ref = ""
def github_ssh_key_name = ""
def connect_secret_basic_name = ""
def nuxeo_image_build = ""
def app_name = ""
def nuxeo_image_name = ""


pipeline {
  agent {
    node {
      label 'maven'
    }
  }

  options {
    timeout(time: 60, unit: 'MINUTES')
  }

  stages {

    stage('Initialize') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              app_name = env.APP_NAME
              echo "Using project: ${openshift.project()} with app: ${app_name}"
              project = openshift.project()
              pipeline_name = env.PIPELINE_NAME
              project_git_repo = env.PROJECT_GIT_REPO
              project_git_ref = env.PROJECT_GIT_REF
              github_ssh_key_name = env.GITHUB_SSH_KEY_NAME
              connect_secret_basic_name = env.CONNECT_SECRET_BASIC_NAME
              nuxeo_image_build = env.NUXEO_IMAGE_BUILD
              nuxeo_image_name = env.NUXEO_IMAGE_NAME
            }
          }
        }
      }
    }

    stage('Checkout repository') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              git url: "${project_git_repo}",
              branch: "${project_git_ref}",
              credentialsId: "${project}-${github_ssh_key_name}"
            }
          }
        }
      }
    }

    stage('Build Nuxeo package') {
      steps {
        script {
          withMaven() {
            withCredentials([
              usernamePassword(
                credentialsId: "${project}-${connect_secret_basic_name}",
                usernameVariable: "NUXEO_CONNECT_USERNAME",
                passwordVariable: "NUXEO_CONNECT_PASSWORD"
              )
            ]) {
              sh "mvn clean package"
              nuxeo_package_helper.stash_nuxeo_package "*"
            }
          }
        }
      }
    }


    stage('Build Docker image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              nuxeo_package_helper.set_build_directory "source"
              nuxeo_package_helper.unstash_nuxeo_package("*", "source")

              // Build docker image
              openshift_image_manager.build(nuxeo_image_build, "source")

              // Promote docker image to the pipeline name
              openshift_image_manager.tag(nuxeo_image_name, pipeline_name)
            }
          }
        }
      }
    }

    stage('Deploy Env') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              openshift_image_manager.deploy "${app_name}-${pipeline_name}-interactive"
            }
          }
        }
      }
    }
  }

  post {
    always {
      // Clean workspace
      cleanWs()
    }
  }

}
