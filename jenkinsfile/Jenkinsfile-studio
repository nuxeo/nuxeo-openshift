def openshift_image_manager = evaluate readTrusted('src/org/nuxeo/openshift/library/OpenshiftImageManager.groovy')
def nuxeo_image_build = ""
def app_name = ""
def nuxeo_image_name = ""

pipeline {
  agent {
    node {
      label 'master'
    }
  }

  options {
    timeout(time: 60, unit: 'MINUTES')
  }

  stages {

    stage('Initialize') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              app_name = env.APP_NAME
              echo "Using project: ${openshift.project()} with app: ${app_name}"
              nuxeo_image_build = env.NUXEO_IMAGE_BUILD
              nuxeo_image_name = env.NUXEO_IMAGE_NAME
            }
          }
        }
      }
    }

    stage('Build Docker image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              // Build docker image
              openshift_image_manager.build nuxeo_image_build

              // Promote docker image to dev
              openshift_image_manager.tag(nuxeo_image_name, "dev")
            }
          }
        }
      }
    }

    stage('Deploy DEV') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              openshift_image_manager.deploy "${app_name}-dev-interactive"
            }
          }
        }
      }
    }

    stage('User validation') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              timeout(60) {
                input message: "Do you want to deploy to UAT environment too?", id: "approval"
                openshift_image_manager.tag(nuxeo_image_name, "uat")
              }
            }
          }
        }
      }
    }

    stage('Deploy UAT') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              openshift_image_manager.deploy "${app_name}-uat-interactive"
            }
          }
        }
      }
    }

  }

  post {
    always {
      // Clean workspace
      cleanWs()
    }
  }

}
