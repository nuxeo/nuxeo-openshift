def nuxeo_package_helper = evaluate readTrusted('src/org/nuxeo/openshift/library/NuxeoPackageHelper.groovy')
def openshift_image_manager = evaluate readTrusted('src/org/nuxeo/openshift/library/OpenshiftImageManager.groovy')
def connect_client = evaluate readTrusted('src/org/nuxeo/openshift/library/ConnectClient.groovy')
def project = ""
def nuxeo_image_build = ""
def nuxeo_image_name = ""
def release_tag = ""

pipeline {
  agent {
    node {
      label 'maven'
    }
  }

  options {
    timeout(time: 60, unit: 'MINUTES')
  }

  stages {

    stage("Choose the release scope") {
      steps {
        script {
          env.RELEASE_SCOPE = input message: "What is the increment version release scope?",
            ok: "Release",
            parameters: [choice(
              name: "Release scope",
              choices: "patch\nminor\nmajor",
              description: "For instance, patch: 1.2.3 => 1.2.4 / minor: 1.2.3 => 1.3.0 / major: 1.2.3 => 2.0.0"
            )]
        }
      }
    }

    stage("Initialize") {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              app_name = env.APP_NAME
              echo "Using project: ${openshift.project()} with app: ${app_name}"
              project = openshift.project()
              project_git_repo = env.PROJECT_GIT_REPO
              project_git_ref = env.PROJECT_GIT_REF
              studio_project = env.STUDIO_PROJECT
              github_ssh_key_name = env.GITHUB_SSH_KEY_NAME
              git_username = env.GIT_USERNAME
              git_email = env.GIT_EMAIL
              nuxeo_version = env.NUXEO_VERSION
              connect_secret_basic_name = env.CONNECT_SECRET_BASIC_NAME
              nexus_creds_name = env.NEXUS_CREDS_NAME
              auto_increment_policy = "auto_" + env.RELEASE_SCOPE
              nuxeo_image_build = env.NUXEO_IMAGE_BUILD
              nuxeo_image_name = env.NUXEO_IMAGE_NAME
            }
          }
        }
      }
    }

    stage('Checkout repository') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              git url: "${project_git_repo}",
              branch: "${project_git_ref}",
              credentialsId: "${project}-${github_ssh_key_name}"
            }
          }
        }
      }
    }

    stage("Build Release") {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              // Download release script
              def operations = []
              def release_files = ["release.py", "requirements.txt", "IndentedHelpFormatterWithNL.py", "nxutils.py", "terminalsize.py"]
              release_files.each { file -> operations.add(
                fileDownloadOperation(
                  url: "https://raw.githubusercontent.com/nuxeo/nuxeo/release-${nuxeo_version}/scripts/${file}",
                  userName: "",
                  password: "",
                  targetLocation: "",
                  targetFileName: "${file}"
                )
              )}
              fileOperations(operations)

              withCredentials([
                usernamePassword(
                  credentialsId: "${project}-${connect_secret_basic_name}",
                  usernameVariable: "NUXEO_CONNECT_USERNAME",
                  passwordVariable: "NUXEO_CONNECT_PASSWORD"
                ),
                usernamePassword(
                  credentialsId: "${project}-${nexus_creds_name}",
                  usernameVariable: "NEXUS_ADMIN_USERNAME",
                  passwordVariable: "NEXUS_ADMIN_PASSWORD"
                ),
                sshUserPrivateKey(
                  credentialsId: "${project}-${github_ssh_key_name}",
                  keyFileVariable: "SSH_KEY_FILE"
                )
              ]) {
                // Put SSH key in /home/jenkins/.ssh/
                sh "mv ${SSH_KEY_FILE} /home/jenkins/.ssh/id_rsa"

                // Setup git config
                sh "git config --global user.name ${git_username}"
                sh "git config --global user.email ${git_email}"

                // Get external releases repository URL
                sh "oc get route/${app_name}-cicd-nexus -o json > nexus-route.json"
                def nexusRoute = readJSON(file: "nexus-route.json")
                env.EXTERNAL_RELEASES_URL = "http://" + nexusRoute.spec.host + nexusRoute.spec.path + "/content/repositories/releases"

                // Prepare release
                sh "python ./release.py -f prepare --aip=${auto_increment_policy}"
                release_tag = sh(
                  returnStdout: true,
                  script: 'log_file="release-${PWD##*/}.log" && source ../$log_file && echo -n $TAG'
                )
                nuxeo_package_helper.stash_nuxeo_package release_tag

                // Perform release and deploy artifacts to Nexus
                sh "python ./release.py perform"
              }
            }
          }
        }
      }
    }

    stage('Build and tag release Docker image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              nuxeo_package_helper.set_build_directory "source"
              nuxeo_package_helper.unstash_and_move_nuxeo_package(release_tag, "source")

              // Build docker image
              openshift_image_manager.build(nuxeo_image_build, "source")

              // Promote docker image to the release tag
              openshift_image_manager.tag(nuxeo_image_name, "v${release_tag}")

              nuxeo_package_helper.stash_nuxeo_package release_tag
            }
          }
        }
      }
    }

    stage('Choose to deploy to Connect Marketplace or not') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              timeout(10) {
                input message: "Do you want to deploy the release artifacts to Nuxeo Connect Marketplace?", id: "deployToConnect"
              }
            }
          }
        }
      }
    }

    stage('Deploy to Connect Marketplace') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              // For now, it only works with the Connect Password and does not with the Connect Token
              withCredentials([
                usernamePassword(
                  credentialsId: "${project}-${connect_secret_basic_name}",
                  usernameVariable: "NUXEO_CONNECT_USERNAME",
                  passwordVariable: "NUXEO_CONNECT_PASSWORD"
                )
              ]) {
                def package_file_path = nuxeo_package_helper.unstash_and_get_nuxeo_package release_tag

                connect_client.deployPackageToConnect(NUXEO_CONNECT_USERNAME, NUXEO_CONNECT_PASSWORD, studio_project, package_file_path)
              }
            }
          }
        }
      }
    }

  }

  post {
    always {
      // Clean workspace
      cleanWs()
    }
  }

}
