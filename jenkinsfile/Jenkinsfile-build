def nuxeo_package_helper = evaluate readTrusted('src/org/nuxeo/openshift/library/NuxeoPackageHelper.groovy')
def project = ""
def project_git_repo = ""
def project_git_ref = ""
def github_ssh_key_name = ""
def connect_secret_basic_name = ""
def nuxeo_image_build = ""
def app_name = ""
def nuxeo_image_name = ""

pipeline {
  agent {
    node {
      label 'maven'
    }
  }

  options {
    timeout(time: 60, unit: 'MINUTES')
  }

  stages {

    stage('Initialize') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              app_name = env.APP_NAME
              echo "Using project: ${openshift.project()} with app: ${app_name}"
              project = openshift.project()
              project_git_repo = env.PROJECT_GIT_REPO
              project_git_ref = env.PROJECT_GIT_REF
              github_ssh_key_name = env.GITHUB_SSH_KEY_NAME
              connect_secret_basic_name = env.CONNECT_SECRET_BASIC_NAME
              hotfix_release_secret_name = env.HOTFIX_RELEASE_SECRET_NAME
              nuxeo_image_build = env.NUXEO_IMAGE_BUILD
              nuxeo_image_name = env.NUXEO_IMAGE_NAME
            }
          }
        }
      }
    }

    stage('Checkout repository') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              git url: "${project_git_repo}",
              branch: "${project_git_ref}",
              credentialsId: "${project}-${github_ssh_key_name}"
            }
          }
        }
      }
    }

    stage('Build Nuxeo package') {
      steps {
        script {
          withMaven() {
            withCredentials([
              usernamePassword(
                credentialsId: "${project}-${hotfix_release_secret_name}",
                usernameVariable: "HOTFIX_RELEASE_USERNAME",
                passwordVariable: "HOTFIX_RELEASE_PASSWORD"
              ),
              usernamePassword(
                credentialsId: "${project}-${connect_secret_basic_name}",
                usernameVariable: "NUXEO_CONNECT_USERNAME",
                passwordVariable: "NUXEO_CONNECT_PASSWORD"
              )

            ]) {
              sh "mvn clean package"
              nuxeo_package_helper.stash_nuxeo_package "*"
            }
          }
        }
      }
    }

    stage('Build Docker image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              if (fileExists("source")) {
                sh "rm -rf source"
              }
              sh "mkdir -p source"
              nuxeo_package_helper.unstash_nuxeo_package "*"

              // Build docker image
              openshift.selector("bc", nuxeo_image_build).startBuild("--from-dir='source'", "--wait")
              def build_last_version = openshift.selector("bc", nuxeo_image_build).object().status.lastVersion
              def last_build = openshift.selector("builds", "${nuxeo_image_build}-${build_last_version}")
              timeout(10) {
                waitUntil {
                  last_build.object().status.phase == "Complete"
                }
              }

              // Promote to dev
              openshift.tag("${nuxeo_image_name}:latest", "${nuxeo_image_name}:dev")
            }
          }
        }
      }
    }

    stage('Deploy DEV') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              openshiftDeploy(deploymentConfig: "${app_name}-dev-interactive")
              timeout(5) {
                openshift.selector("dc", "${app_name}-dev-interactive").related('pods').untilEach(1) {
                  return (it.object().status.phase == "Running")
                }
              }
            }
          }
        }
      }
    }

    stage('Run functional tests') {
      agent {
        node {
          label 'node-chrome'
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              git url: "${project_git_repo}",
              branch: "${project_git_ref}",
              credentialsId: "${project}-${github_ssh_key_name}"
            }
          }
        }
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def packageJsonFiles = findFiles(glob: "**/*-ftest/**/package.json")
              if (packageJsonFiles.length == 0) {
                echo "WARNING: No NodeJs functional tests to run."
              } else {
                def parts = packageJsonFiles[0].path.split("/")
                def ftestDir = ""
                if (parts.length > 1) {
                  ftestDir = parts[parts.length - 2]
                }
                if (!ftestDir.contains("-ftest")) {
                  echo "WARNING: No functional test module (*-ftest) was found."
                }
                def nuxeoUrl = "https://" + openshift.selector("route/${app_name}-dev-route").object().spec.host + "/nuxeo/"
                def dcLatestVersion = openshift.selector("dc", "${app_name}-dev-interactive").object().status.latestVersion
                def rc = openshift.selector('rc', "${app_name}-dev-interactive-${dcLatestVersion}")
                rc.untilEach(1){
                  def rcMap = it.object()
                  return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                }
                withEnv(["NUXEO_URL=${nuxeoUrl}"]) {
                  sh "mvn verify -pl=${ftestDir} -DskipNodeITs=false"
                }
              }
            }
          }
        }
      }
    }

    stage('User validation') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              timeout(60) {
                input message: "Do you want to deploy to UAT environment too?", id: "approval"
                openshift.tag("${nuxeo_image_name}:latest", "${nuxeo_image_name}:uat")
              }
            }
          }
        }
      }
    }

    stage('Deploy UAT') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              openshiftDeploy(deploymentConfig: "${app_name}-uat-interactive")
              timeout(5) {
                openshift.selector("dc", "${app_name}-uat-interactive").related('pods').untilEach(1) {
                  return (it.object().status.phase == "Running")
                }
              }
            }
          }
        }
      }
    }
  }

  post {
    always {
      // Clean workspace
      cleanWs()
    }
  }

}
