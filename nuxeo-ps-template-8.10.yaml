apiVersion: v1
kind: Template
message: |-
  The following backing services for Nuxeo have been created in your project:

    * a MongoDB instance
    * an Elasticsearch simple node    
    * a dev deployment
    * a uat deployment
    * a pipeline build

  Please add a Github webhook to https://openshift.dev.nuxeo.io/oapi/v1/namespaces/<<NAMESPACE>>/buildconfigs/${APPLICATION_NAME}-pipeline/webhooks/${GITHUB_WEBHOOK_SECRET}/github
metadata:  
  name: nuxeo-ps-pipeline-8.10
  namespace: openshift
  annotations:
    description: |
      This template setup a basic development environment for professional services.
    openshift.io/display-name: Nuxeo 8.10 PS dev environment (no cluster)
    template.openshift.io/documentation-url: https://github.com/nuxeo/nuxeo-openshift
    template.openshift.io/long-description: |-
      This template setup a basic development environment for professional services.
    template.openshift.io/provider-display-name: Nuxeo
    template.openshift.io/support-url: https://answers.nuxeo.com/
    iconClass: icon-java
    tags: java, nuxeo
parameters:
  - description: The name for the application.
    name: APPLICATION_NAME
    value: nuxeo
    required: true
  - description: The URL of the repository with your Nuxeo project to build
    name: SOURCE_REPOSITORY_URL
    value: https://github.com/nuxeo/nuxeo-customer-project-sample
    required: true
  - description: The reference to checkout.
    name: SOURCE_REPOSITORY_REF
    value: "master"
    required: true
  - description: The Nuxeo version to use. Use the version of the image (latest, 9.2, 8.10...)
    name: NUXEO_VERSION
    value: "8.10"
    required: true
  - description: Github Webhook secret (leave empty and it will be generated)
    name: GITHUB_WEBHOOK_SECRET
    required: true
    from: "[a-zA-Z0-9]{12}"
    generate: "expression"            
  - description: A Nuxeo Connect userId passed to the build of the image.
    name: NUXEO_CONNECT_USERNAME
    required: false
  - description: The password of the Nuxeo Connect account passed to the build of the image.
    name: NUXEO_CONNECT_PASSWORD
    required: false
  - description: The name of the studio project passed to the build of the image.
    name: NUXEO_STUDIO_PROJECT
    required: false
  - description: The version of the studio project passed the build of the image
    name: NUXEO_STUDIO_VERSION
    required: false
    value: 0.0.0-SNAPSHOT
  - description: Size of persistent storage for Binaries.
    name: VOLUME_BINARIES_CAPACITY
    value: 5Gi
    required: true
  - description: Size of persistent storage for MongoDB.
    name: VOLUME_MONGODB_CAPACITY
    value: 5Gi
    required: true
  - description: Size of persistent storage for Elasticsearch.
    name: VOLUME_ELASTICSEARCH_CAPACITY
    value: 5Gi
    required: true
  - description: Elasticsearch cluster name
    name: ELASTICSEARCH_CLUSTER_NAME
    value: nuxeo
    required: true
  - description: Elasticsearch Memory
    name: ELASTICSEARCH_CLUSTER_MEMORY
    value: 256m
    required: true
  - description: Domain suffix for routes
    name: DOMAIN_SUFFIX
    value: apps.dev.nuxeo.io
    required: true
  - description: Storage class for persistence volumes
    name: STORAGE_CLASS
    value: gp2
    required: true
  
objects:



############################################################################################################
# Backing services (ES and Mongo)
############################################################################################################

- kind: ConfigMap
  metadata:
    name: ${APPLICATION_NAME}-elasticsearch-config
    labels:
      app: ${APPLICATION_NAME}
      component: elasticsearch
      role: config
  apiVersion: v1
  data:
    log4j2.properties: |-
      appender.rolling.type = RollingFile 
      appender.rolling.name = rolling
      appender.rolling.fileName = ${sys:es.logs.base_path}${sys:file.separator}${sys:es.logs.cluster_name}.log 
      appender.rolling.layout.type = PatternLayout
      appender.rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%.-10000m%n
      appender.rolling.filePattern = ${sys:es.logs.base_path}${sys:file.separator}${sys:es.logs.cluster_name}-%d{yyyy-MM-dd}-%i.log.gz 
      appender.rolling.policies.type = Policies
      appender.rolling.policies.time.type = TimeBasedTriggeringPolicy 
      appender.rolling.policies.time.interval = 1 
      appender.rolling.policies.time.modulate = true 
      appender.rolling.policies.size.type = SizeBasedTriggeringPolicy 
      appender.rolling.policies.size.size = 256MB 
      appender.rolling.strategy.type = DefaultRolloverStrategy
      appender.rolling.strategy.fileIndex = nomax
      appender.rolling.strategy.action.type = Delete 
      appender.rolling.strategy.action.basepath = ${sys:es.logs.base_path}
      appender.rolling.strategy.action.condition.type = IfFileName 
      appender.rolling.strategy.action.condition.glob = ${sys:es.logs.cluster_name}-* 
      appender.rolling.strategy.action.condition.nested_condition.type = IfAccumulatedFileSize 
      appender.rolling.strategy.action.condition.nested_condition.exceeds = 2GB 
    elasticsearch.yml: |-
      cluster:
        name: ${CLUSTER_NAME}
      node:
        master: ${NODE_MASTER}
        data: ${NODE_DATA}
      network.host: ${NETWORK_HOST}
      path:
        data: /usr/share/elasticsearch/data
        logs: /usr/share/elasticsearch/data/log
        work: /usr/share/elasticsearch/data/work
        plugins: /usr/share/elasticsearch/plugins
      bootstrap.mlockall: true
      http:
        enabled: ${HTTP_ENABLE}
        compression: true
        cors:
          enabled: ${HTTP_CORS_ENABLE}
          allow-origin: ${HTTP_CORS_ALLOW_ORIGIN}
      cloud:
        kubernetes:
          service: ${DISCOVERY_SERVICE}
          namespace: ${NAMESPACE}
      discovery:
        type: kubernetes
        zen:
          minimum_master_nodes: ${NUMBER_OF_MASTERS}
      index:
          number_of_shards: ${NUMBER_OF_SHARDS}
          number_of_replicas: ${NUMBER_OF_REPLICAS}
    logging.yml: |
      # you can override this using by setting a system property, for example -Des.logger.level=DEBUG
      es.logger.level: INFO
      rootLogger: ${es.logger.level}, console
      logger:
        # log action execution errors for easier debugging
        action: DEBUG
        # reduce the logging for aws, too much is logged under the default INFO
        com.amazonaws: WARN
      appender:
        console:
          type: console
          layout:
            type: consolePattern
            conversionPattern: "[%d{ISO8601}][%-5p][%-25c] %m%n"


- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app: ${APPLICATION_NAME}-storage
    name: elasticsearch


- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: ${APPLICATION_NAME}-elasticsearch
    labels:
      app: ${APPLICATION_NAME}-storage
      component: elasticsearch    
  spec:
    serviceName: ${APPLICATION_NAME}-elasticsearch
    replicas: 1
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}-storage
          component: elasticsearch
      spec:
        serviceAccountName: elasticsearch
        containers:
        - name: es-data
          securityContext:
            privileged: true
            capabilities:
              add:
                - IPC_LOCK
          image: nuxeo/docker-elasticsearch-kubernetes:2.4.5
          imagePullPolicy: Always
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: "CLUSTER_NAME"
            value: nuxeo
          - name: NODE_MASTER
            value: "true"
          - name: NODE_INGEST
            value: "false"
          - name: HTTP_ENABLE
            value: "true"
          - name: DISCOVERY_SERVICE
            value: ${APPLICATION_NAME}-elasticsearch
          - name: "ES_JAVA_OPTS"
            # TODO: review values
            value: "-Xms256m -Xmx256m"
          ports:
          - containerPort: 9300
            name: transport
            protocol: TCP
          - containerPort: 9200
            name: client
            protocol: TCP
          volumeMounts:
          - name: data
            mountPath: /data
          - name: config
            mountPath: /usr/share/elasticsearch/config
        initContainers:
        - command:
            - sysctl
            - '-w'
            - vm.max_map_count=262144
          image: busybox
          imagePullPolicy: IfNotPresent
          name: sysctl
          securityContext:
            privileged: true
        volumes:
          - name: config
            configMap:
              name: ${APPLICATION_NAME}-elasticsearch-config

    volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: ${APPLICATION_NAME}   
        annotations:
          volume.beta.kubernetes.io/storage-class: ${STORAGE_CLASS}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi



    

- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}-mongo
    labels:
      app: ${APPLICATION_NAME}-storage
      component: mongo
  spec:
    ports:
    - port: 27017
      targetPort: 27017
    clusterIP: None
    selector:
      app: ${APPLICATION_NAME}-storage
      component: mongo

- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: ${APPLICATION_NAME}-mongo
  spec:
    serviceName: ${APPLICATION_NAME}-mongo
    replicas: 1
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}-storage
          component: mongo          
      spec:
        terminationGracePeriodSeconds: 10
        containers:
          - name: mongo
            image: mongo:3.4
            command:
              - mongod
              - "--smallfiles"
              - "--noprealloc"
            ports:
              - containerPort: 27017
            volumeMounts:
              - name: data
                mountPath: /data/db

    volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: ${APPLICATION_NAME}-storage
        annotations:
          volume.beta.kubernetes.io/storage-class: ${STORAGE_CLASS}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            # TODO: add parameter
            storage: ${VOLUME_MONGODB_CAPACITY}

############################################################################################################
# Commons
############################################################################################################


- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APPLICATION_NAME}-connect
    labels:
      app: ${APPLICATION_NAME}
  stringData:
    connect.properties: |-
      NUXEO_STUDIO_PROJECT=${NUXEO_STUDIO_PROJECT}
      NUXEO_STUDIO_PROJECT_VERSION=${NUXEO_STUDIO_VERSION}
      NUXEO_CONNECT_USERNAME=${NUXEO_CONNECT_USERNAME}
      NUXEO_CONNECT_PASSWORD=${NUXEO_CONNECT_PASSWORD}


- apiVersion: v1
  kind: ImageStream
  metadata:      
    creationTimestamp: null
    name: ${APPLICATION_NAME}-nuxeo
    labels:
      app: ${APPLICATION_NAME}
  spec:
    dockerImageRepository: nuxeo


############################################################################################################
# DEV Deployment
############################################################################################################


- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${APPLICATION_NAME}-dev-conf   
    labels:
      app: ${APPLICATION_NAME}-dev
      role: config
      stage: dev
  data:
    nuxeo.conf: |
      # Additional nuxeo.conf parameters      
    init.sh: |
      #!/bin/sh

      ## Need to use nss_wrapper in order to make LibreOffice conversion works
      ## cf https://docs.openshift.com/enterprise/3.2/creating_images/guidelines.html
      export USER_ID=$(id -u)
      export GROUP_ID=$(id -g)

      cat > /tmp/passwd <<EOT
      root:x:0:0:root:/root:/bin/bash
      nuxeo:x:${USER_ID}:${GROUP_ID}:Nuxeo server:/opt/nuxeo/server:/bin/bash
      EOT

      export LD_PRELOAD=/usr/lib/libnss_wrapper.so
      export NSS_WRAPPER_PASSWD=/tmp/passwd
      export NSS_WRAPPER_GROUP=/etc/group

      if [ ! -f $NUXEO_DATA/instance.clid -a -f /opt/nuxeo/connect/connect.properties ]; then
        . /opt/nuxeo/connect/connect.properties
        if [ -n "$NUXEO_CONNECT_USERNAME" -a -n "$NUXEO_CONNECT_PASSWORD" -a -n "$NUXEO_STUDIO_PROJECT" ]; then  
          echo "---> Registering instance on connect"
          nuxeoctl register $NUXEO_CONNECT_USERNAME $NUXEO_STUDIO_PROJECT dev openshift $NUXEO_CONNECT_PASSWORD
        fi
      fi

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      volume.beta.kubernetes.io/storage-class: ${STORAGE_CLASS}
    creationTimestamp: null
    name: ${APPLICATION_NAME}-dev-binaries
    labels:
      app: ${APPLICATION_NAME}-dev
      role: data
      stage: dev
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_BINARIES_CAPACITY}


- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}-dev
      stage: dev
      component: nuxeo
    name: ${APPLICATION_NAME}-dev-nuxeo
  spec:
    strategy:
      type: Rolling
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}-dev
      component: nuxeo
      stage: dev
      deploymentconfig: ${APPLICATION_NAME}-dev-nuxeo
    
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}-dev
          component: nuxeo
          stage: dev
          deploymentconfig: ${APPLICATION_NAME}-dev-nuxeo
      spec:
        containers:
        - image: ${APPLICATION_NAME}-nuxeo:latest
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /nuxeo/runningstatus
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /nuxeo/runningstatus
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: ${APPLICATION_NAME}-appserver
          env:
          - name: NUXEO_TEMPLATES
            value: "default,mongodb,mongodb-audit"
          - name: NUXEO_CUSTOM_PARAM
            value: |
              nuxeo.mongodb.server=mongodb://${APPLICATION_NAME}-mongo-0.${APPLICATION_NAME}-mongo:27017
              nuxeo.mongodb.dbname=${APPLICATION_NAME}-dev
              elasticsearch.client=RestClient
              elasticsearch.httpReadOnly.baseUrl=http://${APPLICATION_NAME}-elasticsearch:9200
              elasticsearch.indexName=${APPLICATION_NAME}-dev
              mail.transport.host=aws-smtp-relay.common-infra.svc
              mail.from=noreply@nuxeo.io               
              
          - name: NUXEO_PACKAGES
            value: nuxeo-web-ui
          - name: NUXEO_URL
            value: htts://${APPLICATION_NAME}-dev.${DOMAIN_SUFFIX}
          - name: NUXEO_ES_HOSTS
            value: ${APPLICATION_NAME}-elasticsearch:9200
          - name: NUXEO_ES_CLUSTERNAME
            value: ${ELASTICSEARCH_CLUSTER_NAME}
          - name: NUXEO_ES_REPLICAS
            value: "0"
          - name: NUXEO_BINARY_STORE
            value: /binaries
          - name: HOME
            value: /opt/nuxeo/server
          
          ports:
          - containerPort: 8080
            protocol: TCP
          volumeMounts:
          - name: ${APPLICATION_NAME}-binaries
            mountPath: /binaries
          - name: nuxeoconf
            mountPath: /docker-entrypoint-initnuxeo.d
          - name: connect-secret
            mountPath: /opt/nuxeo/connect

          - name: nuxeodata
            mountPath: /var/lib/nuxeo/data
          - name: nuxeolog
            mountPath: /var/log/nuxeo
          - name: nuxeotmp
            mountPath: /opt/nuxeo/server/tmp
        volumes:
        - name: ${APPLICATION_NAME}-binaries
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-dev-binaries
        - name: nuxeoconf
          configMap:
            name: ${APPLICATION_NAME}-dev-conf  
        - name: connect-secret
          secret:
            secretName: ${APPLICATION_NAME}-connect
        - name: nuxeodata
          emptyDir: {}
        - name: nuxeolog
          emptyDir: {}
        - name: nuxeotmp
          emptyDir: {}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30        
    test: false
    triggers:
    - type: ConfigChange
    - type: "ImageChange"
      imageChangeParams:
        automatic: false
        containerNames:
        - ${APPLICATION_NAME}-appserver
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-nuxeo:latest
    
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}-dev-nuxeo
    labels:
      app: ${APPLICATION_NAME}-dev
      component: nuxeo
      role: lb
  spec:
    clusterIP: None    
    selector:
      app: ${APPLICATION_NAME}-dev
      component: nuxeo
      stage: dev
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}-dev
    name: ${APPLICATION_NAME}-dev-nuxeo-route  
  spec:
    host: ${APPLICATION_NAME}-dev.${DOMAIN_SUFFIX}
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: ${APPLICATION_NAME}-dev-nuxeo
    port:
      targetPort: 8080-tcp
    wildcardPolicy: None

############################################################################################################
# UAT Deployment
############################################################################################################


- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${APPLICATION_NAME}-uat-conf   
    labels:
      app: ${APPLICATION_NAME}-uat
      role: config
      stage: dev
  data:
    nuxeo.conf: |
      # Additional nuxeo.conf parameters      
    init.sh: |
      #!/bin/sh

      ## Need to use nss_wrapper in order to make LibreOffice conversion works
      ## cf https://docs.openshift.com/enterprise/3.2/creating_images/guidelines.html
      export USER_ID=$(id -u)
      export GROUP_ID=$(id -g)

      cat > /tmp/passwd <<EOT
      root:x:0:0:root:/root:/bin/bash
      nuxeo:x:${USER_ID}:${GROUP_ID}:Nuxeo server:/opt/nuxeo/server:/bin/bash
      EOT

      export LD_PRELOAD=/usr/lib/libnss_wrapper.so
      export NSS_WRAPPER_PASSWD=/tmp/passwd
      export NSS_WRAPPER_GROUP=/etc/group

      if [ ! -f $NUXEO_DATA/instance.clid -a -f /opt/nuxeo/connect/connect.properties ]; then
        . /opt/nuxeo/connect/connect.properties
        if [ -n "$NUXEO_CONNECT_USERNAME" -a -n "$NUXEO_CONNECT_PASSWORD" -a -n "$NUXEO_STUDIO_PROJECT" ]; then  
          echo "---> Registering instance on connect"
          nuxeoctl register $NUXEO_CONNECT_USERNAME $NUXEO_STUDIO_PROJECT dev openshift $NUXEO_CONNECT_PASSWORD
        fi
      fi

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      volume.beta.kubernetes.io/storage-class: ${STORAGE_CLASS}
    creationTimestamp: null
    name: ${APPLICATION_NAME}-uat-binaries
    labels:
      app: ${APPLICATION_NAME}-uat
      role: data
      stage: uat
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_BINARIES_CAPACITY}


- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}-uat
      stage: uat
      component: nuxeo
    name: ${APPLICATION_NAME}-uat-nuxeo
  spec:
    strategy:
      type: Rolling
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}-uat
      component: nuxeo
      stage: uat
      deploymentconfig: ${APPLICATION_NAME}-uat-nuxeo
    
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}-uat
          component: nuxeo
          stage: uat
          deploymentconfig: ${APPLICATION_NAME}-uat-nuxeo
      spec:
        containers:
        - image: ${APPLICATION_NAME}-nuxeo:latest
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /nuxeo/runningstatus
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /nuxeo/runningstatus
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: ${APPLICATION_NAME}-appserver
          env:
          - name: NUXEO_TEMPLATES
            value: "default,mongodb,mongodb-audit"
          - name: NUXEO_CUSTOM_PARAM
            value: |
              nuxeo.mongodb.server=mongodb://${APPLICATION_NAME}-mongo-0.${APPLICATION_NAME}-mongo:27017
              nuxeo.mongodb.dbname=${APPLICATION_NAME}-uat
              elasticsearch.client=RestClient
              elasticsearch.httpReadOnly.baseUrl=http://${APPLICATION_NAME}-elasticsearch:9200
              elasticsearch.indexName=${APPLICATION_NAME}-uat
              mail.transport.host=aws-smtp-relay.common-infra.svc
              mail.from=noreply@nuxeo.io               
              
          - name: NUXEO_PACKAGES
            value: nuxeo-web-ui
          - name: NUXEO_URL
            value: htts://${APPLICATION_NAME}-dev.${DOMAIN_SUFFIX}
          - name: NUXEO_ES_HOSTS
            value: ${APPLICATION_NAME}-elasticsearch:9200
          - name: NUXEO_ES_CLUSTERNAME
            value: ${ELASTICSEARCH_CLUSTER_NAME}
          - name: NUXEO_ES_REPLICAS
            value: "0"
          - name: NUXEO_BINARY_STORE
            value: /binaries
          - name: HOME
            value: /opt/nuxeo/server
          
          ports:
          - containerPort: 8080
            protocol: TCP
          volumeMounts:
          - name: ${APPLICATION_NAME}-binaries
            mountPath: /binaries
          - name: nuxeoconf
            mountPath: /docker-entrypoint-initnuxeo.d
          - name: connect-secret
            mountPath: /opt/nuxeo/connect

          - name: nuxeodata
            mountPath: /var/lib/nuxeo/data
          - name: nuxeolog
            mountPath: /var/log/nuxeo
          - name: nuxeotmp
            mountPath: /opt/nuxeo/server/tmp
        volumes:
        - name: ${APPLICATION_NAME}-binaries
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-uat-binaries
        - name: nuxeoconf
          configMap:
            name: ${APPLICATION_NAME}-uat-conf  
        - name: connect-secret
          secret:
            secretName: ${APPLICATION_NAME}-connect
        - name: nuxeodata
          emptyDir: {}
        - name: nuxeolog
          emptyDir: {}
        - name: nuxeotmp
          emptyDir: {}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30        
    test: false
    triggers:
    - type: ConfigChange
    - type: "ImageChange"
      imageChangeParams:
        automatic: false
        containerNames:
        - ${APPLICATION_NAME}-appserver
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-nuxeo:latest
    
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}-uat-nuxeo
    labels:
      app: ${APPLICATION_NAME}-uat
      component: nuxeo
      role: lb
  spec:
    clusterIP: None
    selector:
      app: ${APPLICATION_NAME}-uat
      component: nuxeo
      stage: uat
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}-uat
    name: ${APPLICATION_NAME}-uat-nuxeo-route  
  spec:
    # TODO: Add parameter
    host: ${APPLICATION_NAME}-uat.${DOMAIN_SUFFIX}
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect    
    to:
      kind: Service
      name: ${APPLICATION_NAME}-uat-nuxeo
    port:
      targetPort: 8080-tcp
    wildcardPolicy: None



############################################################################################################
# Build pipeline
############################################################################################################


- apiVersion: v1
  kind: ImageStream
  metadata:          
    name: ${APPLICATION_NAME}-base-image
    labels:
      app: ${APPLICATION_NAME}
  spec: {}
  status:
    dockerImageRepository: ""    


- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      component: build
    name: ${APPLICATION_NAME}-base-image-build
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: '${APPLICATION_NAME}-base-image:latest'
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |-
          FROM nuxeo:9.10
          USER root

          # Reinstall ImageMagick with the RSVG delegate
          RUN apt-get update && \
              apt-get remove -y imagemagick && \
              apt-get install -y --no-install-recommends librsvg2-bin && \
              apt-get install -y imagemagick && \
              apt-get install -y --no-install-recommends vim libnss-wrapper && \
              wget http://apt.nuxeo.org/pool/releases/ffmpeg-nuxeo_2.8.5-1_amd64.deb && \
              dpkg -i ffmpeg-nuxeo_2.8.5-1_amd64.deb && \
              rm -f ffmpeg-nuxeo_2.8.5-1_amd64.deb    
          USER 1000
      type: Dockerfile
    strategy:
      dockerStrategy: {}
      type: Docker



- apiVersion: v1
  kind: ImageStream
  metadata:          
    name: ${APPLICATION_NAME}-app-build
    labels:
      app: ${APPLICATION_NAME}
  spec: {}
  status:
    dockerImageRepository: ""    


- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      component: build
    name: ${APPLICATION_NAME}-app-build
  spec:
    source:
      git:
        uri: ${SOURCE_REPOSITORY_URL}
        ref: ${SOURCE_REPOSITORY_REF}
      type: Git
      secrets:
      - destinationDir: /opt/nuxeo/connect
        secret:
          name: ${APPLICATION_NAME}-connect
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: DockerImage
          name: 'nuxeo/s2i:${NUXEO_VERSION}'
        incremental: true      
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-app-build:latest
  successfulBuildsHistoryLimit: 2 
  failedBuildsHistoryLimit: 2 

- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}-app-assemble
    labels:
      app: ${APPLICATION_NAME}
      component: assembly
  spec:
    source:
      dockerfile: |-
        FROM ${APPLICATION_NAME}-base-image:latest
        USER root
        COPY build /build
        RUN chmod -R 777 /build
        USER 1000
        COPY ./connect.properties /opt/nuxeo/connect/connect.properties
        RUN /build/install.sh
        # Clean credential after using it
        USER root
        RUN rm -f /opt/nuxeo/connect/connect.properties && \
            rm -rf /opt/nuxeo/server/nxserver/config && \
            chgrp -fR 0 /opt/nuxeo/server/ && \
            chmod -fR g+rwX /opt/nuxeo/server/
        USER 1000
      images:
        - from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}-app-build:latest
          paths:
            - destinationDir: .
              sourcePath: /build
      secrets:
        - destinationDir: ./
          secret:
            name: ${APPLICATION_NAME}-connect
      type: Dockerfile
    strategy:
      dockerStrategy:
        forcePull: true
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}-base-image:latest
      type: Docker
    output:
      to:
        kind: ImageStreamTag
        name: '${APPLICATION_NAME}-nuxeo:latest'
    successfulBuildsHistoryLimit: 2 
    failedBuildsHistoryLimit: 2 




- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${APPLICATION_NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      name: ${APPLICATION_NAME}-pipeline
    name: ${APPLICATION_NAME}-pipeline
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 60, unit: 'MINUTES') {
                node {
                    project = env.PROJECT_NAME
                    stage("init") {
                      sh "oc get route ${APPLICATION_NAME}-dev-nuxeo-route -n ${project} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"
                      routeHost = readFile('routehost').trim()
                    }

                    stage('build-app') {
                      openshiftBuild(buildConfig: '${APPLICATION_NAME}-app-build', showBuildLogs: 'true', waitTime: '1800000')
                    }

                    stage('assemble-app') {
                      openshiftBuild(buildConfig: '${APPLICATION_NAME}-app-assemble', showBuildLogs: 'true')
                    }

                    stage('deploy-dev') {
                      openshiftDeploy(deploymentConfig: '${APPLICATION_NAME}-dev-nuxeo')
                    }
                }
             }
             
            node {

                stage("validate") {
                  input message: "Test and validate deployment at http://${routeHost}. Approve?", id: "approval"
                }
            }
            timeout(time: 60, unit: 'MINUTES') {
                node {
                  stage('deploy-uat') {
                    openshiftDeploy(deploymentConfig: '${APPLICATION_NAME}-uat-nuxeo')
                  }
                }
            }
             
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }          
      type: JenkinsPipeline
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    successfulBuildsHistoryLimit: 10 
    failedBuildsHistoryLimit: 5
