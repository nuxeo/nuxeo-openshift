---
apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceInstance
metadata:
  labels:
    app: "{{ app_name }}"
    apb_name: "{{ apb_name }}"
    apb_plan_id: "{{ _apb_plan_id }}"
    apb_service_class_id: "{{ _apb_service_class_id }}"
    apb_service_instance_id: "{{ _apb_service_instance_id }}"
    component: nuxeo
    environment: "{{ item }}"
  name: "{{ app_name }}-{{ item }}-nuxeo-service"
  namespace: "{{ namespace }}"
spec:
  clusterServiceClassExternalName: nuxeo-nuxeo-apb
  clusterServicePlanExternalName: nuxeo-cluster
  parameters:
    app_name: {{ app_name }}-{{ item }}
    interactive_replicas: 1
    worker_replicas: {{ '1' if use_kafka else '0' }}
    nuxeoVersion: "{{ global_config.nuxeo_version }}"
    image_repository: "{{ docker_image }}"
    image_tag: "{{ item }}"
    image_pullPolicy: Always
    transientstore_persistentVolume_enabled: false
    data_persistentVolume_enabled: false
    applicationUrl: "{{ app_name }}-{{ item }}.apps.dev.va.nuxeocloud.com"
    nuxeoPackages: "{{ global_config.nuxeo_packages }}"
    nuxeoTemplates: "{{ global_config.nuxeo_templates }}"
    nuxeoStudioProject:
    connect_enabled: true
    connectExistingSecret: "{{ global_config.connect_secret_name}} "
    nuxeoJavaOpts: "-Xms512m -Xmx1024m -Djava.net.preferIPv4Stack=true -Dlog4j2.formatMsgNoLookups=true"
    resources: "{'limits': {'cpu': '2','memory': '2Gi'},'requests': {'cpu': '1','memory': '1Gi'}}"
    connectInstallHotfix: false
{% if use_mongodb %}
    useExternalMongoDB: true
    mongoServiceName: "{{ global_config.mongodb_service_name }}"
{% else %}
    useExternalMongoDB: false
{% endif %}
{% if use_elasticsearch  %}
    useExternalElasticsearch: true
    elasticsearchServiceName: "{{ global_config.elasticsearch_service_name }}"
{% else %}
    useExternalElasticsearch: false
{% endif %}
{% if use_kafka %}
    useKafkaForStream: true
    kafkaServiceName: "{{ global_config.kafka_service_name }}"
{% else %}
    useKafkaForStream: false
{% endif %}
{% if use_minio %}
    useMinioForBinaries: true
    minioServiceName: "{{ global_config.minio_service_name }}"
{% else %}
    binaries_persistentVolume_enabled: true
    binaries_persistentVolume_storageClass: "{{ global_config.binaries_pv_storage_class }}"
    binaries_persistentVolume_size: "10Gi"
{% endif %}
